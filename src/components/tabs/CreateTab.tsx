import { useState, useEffect, useMemo } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { CodeEditor } from "@/components/CodeEditor";
import { DiagnosticLog } from "@/components/DiagnosticLog";
import { ComponentSettings } from "@/components/ComponentSettings";
import { ZipUpload } from "@/components/ZipUpload";
import { ProgressIndicator } from "@/components/ProgressIndicator";
import { Loader2, Sparkles, Wand2, Check, X } from "lucide-react";
import { toast } from "sonner";
import { callBothubAPI, estimateTokens } from "@/lib/bothub-api";
import { useMindboxPrompts } from "@/hooks/useMindboxPrompts";
import type { Scenario } from "@/lib/prompts";
import { buildSingleShotPrompt } from "@/lib/prompts";
import { saveToHistory } from "@/lib/history-manager";
import { components, friendlyNames, smartHints } from "@/lib/component-settings";
import type { MindboxState } from "@/types/mindbox";
import { applySettingsToCode } from "@/lib/code-sync";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { logger } from "@/lib/logger";

interface CreateTabProps {
  state: MindboxState;
  updateState: (updates: Partial<MindboxState>) => void;
  setActiveTab: (tab: string) => void;
  onImproveGoalClick: () => void;
}

export function CreateTab({ state, updateState, setActiveTab, onImproveGoalClick }: CreateTabProps) {
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState(0);
  const [progressMessage, setProgressMessage] = useState("");
  const [selectedSettings, setSelectedSettings] = useState<Record<string, boolean>>({});
  const [isApplyingSettings, setIsApplyingSettings] = useState(false);
  const [goalInput, setGoalInput] = useState(state.goal);
  const [abortController, setAbortController] = useState<AbortController | null>(null);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º goalInput —Å state.goal –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    setGoalInput(state.goal);
  }, [state.goal]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
  const settingsList = useMemo(() => {
    return Object.entries(selectedSettings)
      .filter(([_, checked]) => checked)
      .map(([settingId]) => settingId)
      .join(', ');
  }, [selectedSettings]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–º–ø—Ç–æ–≤
  const {
    scenario,
    step1Prompt,
    step2Prompt,
    step3Prompt,
    stepNames,
    pipelineDescription
  } = useMindboxPrompts({
    goal: state.goal,
    html: state.originalHtml,
    visualHtml: state.visualHtml,
    json: state.originalJson,
    isDynamicGrid: state.isDynamicGrid,
    isEditable: state.isEditable,
    settingsList,
    quickFix: state.quickFix
  });

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É —Ç–æ–∫–µ–Ω–æ–≤
  const tokenEstimate = useMemo(() => {
    const combinedText = [state.goal, state.originalHtml, state.originalJson].join('\n');
    return estimateTokens(combinedText) * 3; // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 3 —à–∞–≥–∞
  }, [state.goal, state.originalHtml, state.originalJson]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–≤—Å–µ 3 —à–∞–≥–∞)
  const outputPrompt = useMemo(() => {
    return `# –°–¶–ï–ù–ê–†–ò–ô: ${pipelineDescription}

# –û–¶–ï–ù–ö–ê –¢–û–ö–ï–ù–û–í: ~${tokenEstimate} —Ç–æ–∫–µ–Ω–æ–≤

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã –®–ê–ì 1: ${stepNames.step1}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${step1Prompt}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã –®–ê–ì 2: ${stepNames.step2}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${step2Prompt}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã –®–ê–ì 3: ${stepNames.step3}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${step3Prompt}`;
  }, [pipelineDescription, tokenEstimate, stepNames, step1Prompt, step2Prompt, step3Prompt]);

  const addLog = (message: string) => {
    const timestamp = new Date().toISOString().replace('T', ' ').split('.')[0];
    const logEntry = `[${timestamp}] ${message}`;
    updateState({ log: [...state.log, logEntry] });
  };

  const applyGoal = () => {
    updateState({ goal: goalInput });
    toast.success("–¶–µ–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –ø—Ä–æ–º–ø—Ç—É");
  };

  const isGoalChanged = useMemo(() => {
    return goalInput.trim() !== state.goal.trim();
  }, [goalInput, state.goal]);

  const updateHtml = (html: string) => {
    updateState({ originalHtml: html });
  };

  const updateJson = (json: string) => {
    updateState({ originalJson: json });
  };

  const parseCodeBlocks = (text: string) => {
    const htmlMatch = text.match(/```\s*html[\r\n]+([\s\S]*?)```/i);
    const jsonMatch = text.match(/```\s*json[\r\n]+([\s\S]*?)```/i);
    const reportMatch = text.match(/---\s*–û–¢–ß–ï–¢ –û–ë –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•\s*---[\r\n]+([\s\S]*)/i);
    
    return {
      html: htmlMatch ? htmlMatch[1].trim() : '',
      json: jsonMatch ? jsonMatch[1].trim() : '',
      report: reportMatch ? reportMatch[1].trim() : ''
    };
  };

  const handleSettingChange = async (component: string, setting: string, checked: boolean) => {
    const settingId = `${component}-${setting}`;
    setSelectedSettings(prev => ({ ...prev, [settingId]: checked }));

    // –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º —É–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    const hint = smartHints[setting];
    if (hint) {
      let newGoal = goalInput;
      if (checked && !newGoal.includes(hint)) {
        newGoal = (newGoal.trim() + '\n' + hint).trim();
      } else if (!checked && newGoal.includes(hint)) {
        newGoal = newGoal.replace('\n' + hint, '').replace(hint, '').trim();
      }
      setGoalInput(newGoal);
      updateState({ goal: newGoal });
    }

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –∫–æ–¥—É
    if (state.originalHtml.trim() || state.originalJson.trim()) {
      setIsApplyingSettings(true);
      try {
        const { html: newHtml, json: newJson } = applySettingsToCode(
          state.originalHtml,
          state.originalJson,
          settingId,
          checked
        );
        
        updateState({ originalHtml: newHtml, originalJson: newJson });
        addLog(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${settingId} ${checked ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`);
      } catch (error) {
        logger.error('Error applying settings', 'CreateTab', { error: error instanceof Error ? error.message : error });
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
      } finally {
        setIsApplyingSettings(false);
      }
    }
  };

  const generateGoalFromSettings = () => {
    const selected = Object.entries(selectedSettings)
      .filter(([_, checked]) => checked)
      .map(([settingId]) => {
        const [component, setting] = settingId.split('-');
        const componentTitle = components[component]?.title || component;
        const settingName = friendlyNames[setting] || setting;
        return `- ${componentTitle}: ${settingName}`;
      });

    if (selected.length === 0) {
      toast.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ AI –ø–æ–¥—Å–∫–∞–∑–∫–∏
    const existingHints = Object.values(smartHints).filter(hint => 
      goalInput.includes(hint)
    );

    let goal = `–°–æ–∑–¥–∞—Ç—å –±–ª–æ–∫ —Å —Å–ª–µ–¥—É—é—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:\n\n${selected.join('\n')}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
    if (existingHints.length > 0) {
      goal = goal + '\n\n' + existingHints.join('\n');
    }

    setGoalInput(goal);
    updateState({ goal });
    toast.success("–¶–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
  };

  const handleZipParsed = (editorHtml: string, visualHtml: string, json: string) => {
    updateState({ 
      originalHtml: editorHtml,
      originalJson: json,
      html: editorHtml,
      visualHtml: visualHtml,
      json 
    });
    addLog("ZIP —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: editor HTML, visual HTML, JSON");
  };

  const handleCancelRequest = () => {
    if (abortController) {
      abortController.abort();
      setAbortController(null);
      addLog("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
    }
  };

  const handleAnalyze = async () => {
    if (!state.goal.trim() && !state.originalHtml.trim() && !state.originalJson.trim()) {
      toast.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ");
      return;
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Ä–∞–±–æ—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
    updateState({
      html: state.originalHtml,
      json: state.originalJson
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const controller = new AbortController();
    setAbortController(controller);

    setIsProcessing(true);
    setProgress(0);
    setCurrentStep(0);
    
    addLog(`–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞: ${pipelineDescription}`);

    try {
      // ============================================================
      // –ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú: 1 –ó–ê–ü–†–û–° –° –§–ê–ô–õ–ê–ú–ò
      // ============================================================
      if (state.fastMode) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if (!state.originalHtml.trim() && !state.originalJson.trim()) {
          toast.error("–ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP —Å —Ñ–∞–π–ª–∞–º–∏ –±–ª–æ–∫–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –≤—Ä—É—á–Ω—É—é");
          setIsProcessing(false);
          return;
        }

        setCurrentStep(1);
        setProgress(10);
        setProgressMessage("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...");
        addLog("–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ KB –∏ —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∞");

        try {
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
          const { loadKnowledgeBaseAsText, createDocumentContent, createTextContent } = await import('@/lib/file-utils');

          setProgress(15);
          setProgressMessage("–ó–∞–≥—Ä—É–∑–∫–∞ Knowledge Base...");
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º KB –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç
          const kbContent = await loadKnowledgeBaseAsText();
          addLog("Knowledge Base –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç");

          setProgress(20);
          setProgressMessage("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∞...");

          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±–µ–∑ KB –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö)
          const messageContent: any[] = [];

          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –±–ª–æ–∫–∞ –ü–ï–†–í–´–ú–ò –µ—Å–ª–∏ –µ—Å—Ç—å
          if (state.visualHtml?.trim()) {
            messageContent.push(createDocumentContent(
              state.visualHtml,
              "block.html",
              "text/html"
            ));
            addLog("–î–æ–±–∞–≤–ª–µ–Ω block.html (–≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å)");
          }

          if (state.originalHtml?.trim()) {
            messageContent.push(createDocumentContent(
              state.originalHtml,
              "block_editor.html",
              "text/html"
            ));
            addLog("–î–æ–±–∞–≤–ª–µ–Ω block_editor.html (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —à–∞–±–ª–æ–Ω)");
          }

          if (state.originalJson?.trim()) {
            messageContent.push(createDocumentContent(
              state.originalJson,
              "block.json",
              "application/json"
            ));
            addLog("–î–æ–±–∞–≤–ª–µ–Ω block.json");
          }

          // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å –ü–û–õ–ù–û–ô KB –≤–Ω—É—Ç—Ä–∏
          const promptText = `
# KNOWLEDGE BASE - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê

${kbContent}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# –ó–ê–î–ê–ß–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${state.originalHtml || state.visualHtml ? `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–∞:
- **block.html** (–µ—Å–ª–∏ –µ—Å—Ç—å) - –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±–ª–æ–∫
- **block_editor.html** - –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- **block.json** - —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è JSON

–ò—Å–ø–æ–ª—å–∑—É—è Knowledge Base –≤—ã—à–µ –∫–∞–∫ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–∏–ª, —Å–æ–∑–¥–∞–π:
1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π HTML –∫–æ–¥ (–Ω–∞ –æ—Å–Ω–æ–≤–µ block_editor.html)
2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON –∫–æ–¥ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å HTML)
` : `
–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π Mindbox –±–ª–æ–∫ —Å –Ω—É–ª—è, —Å–ª–µ–¥—É—è –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ Knowledge Base –≤—ã—à–µ.
`}

## –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ë–õ–û–ö–£

### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
${settingsList || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–∫–∞: ${state.isDynamicGrid ? '–î–ê - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @{for} –¥–ª—è —Å–µ—Ç–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤' : '–ù–ï–¢'}
- –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Ä–µ–∂–∏–º: ${state.isEditable ? '–î–ê - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \${editor.variableName} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞' : '–ù–ï–¢'}

### –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
${state.goal || '–°–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π Mindbox –±–ª–æ–∫'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –¥–≤–∞ –±–ª–æ–∫–∞ –∫–æ–¥–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

\`\`\`html
[–ü–æ–ª–Ω—ã–π HTML –∫–æ–¥ –±–ª–æ–∫–∞]
\`\`\`

\`\`\`json
[–ü–æ–ª–Ω—ã–π JSON –º–∞—Å—Å–∏–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏]
\`\`\`

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

1. –°–ª–µ–¥—É–π –í–°–ï–ú –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ Knowledge Base –≤—ã—à–µ
2. –ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –º–µ–∂–¥—É —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ KB ‚Äî —Å–ª–µ–¥—É–π KB (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç A)
3. –ò—Å–ø–æ–ª—å–∑—É–π Developer Checklist –∏–∑ KB –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞
4. HTML –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <!-- EDITOR_BLOCK_TEMPLATE: –Ω–∞–∑–≤–∞–Ω–∏–µ -->
5. JSON –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PRODUCTS_IN_FOR_NODE –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
6. –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å fallbackFont
7. SIZE control –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å defaultValue = "manual 100 *"
8. –§–æ–Ω–æ–≤—ã–µ —è—á–µ–π–∫–∏ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å formattedWidthAttribute –∏ formattedWidthStyle
9. –í–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–µ–π—Å–µ—Ä—ã (Ghost Tables)
`;

          messageContent.push(createTextContent(promptText));
          addLog("–ü—Ä–æ–º–ø—Ç —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Knowledge Base –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω");

          setProgress(25);
          setProgressMessage("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini Pro...");
          addLog("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–¥–∏–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ Gemini 2.5 Pro");

          const response = await callBothubAPI(
            [{ role: "user", content: messageContent }],
            { model: "gemini-2.5-pro", signal: controller.signal }
          );

          setProgress(70);
          setProgressMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...");

          const { html, json } = parseCodeBlocks(response);
          
          if (!html || !json) {
            throw new Error("AI –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π HTML –∏–ª–∏ JSON");
          }

          updateState({ 
            html, 
            json,
            fixedHtml: html,
            fixedJson: json,
            reportMarkdown: '‚úÖ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (1 –∑–∞–ø—Ä–æ—Å —Å —Ñ–∞–π–ª–∞–º–∏)'
          });

          setProgress(100);
          setProgressMessage("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
          addLog("–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          saveToHistory("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º —Å —Ñ–∞–π–ª–∞–º–∏)", {
            goal: state.goal,
            originalHtml: state.originalHtml,
            originalJson: state.originalJson,
            html,
            json,
            fixedHtml: html,
            fixedJson: json,
            reportMarkdown: '‚úÖ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ KB'
          });

          toast.success("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)");
          
          setTimeout(() => {
            setActiveTab('fixed');
          }, 500);

          return;
        } catch (error) {
          logger.error("Fast mode file processing error", "CreateTab", { 
            error: error instanceof Error ? error.message : error 
          });
          
          if (error instanceof Error && error.message !== 'Request cancelled') {
            toast.error(`–û—à–∏–±–∫–∞: ${error.message}`);
          }
          throw error;
        }
      }

      // ============================================================
      // –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú: 3 –ó–ê–ü–†–û–°–ê (–®–ê–ì 1)
      // ============================================================
      setCurrentStep(1);
      setProgress(10);
      setProgressMessage("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML...");
      addLog(`–®–∞–≥ 1/3: ${stepNames.step1}`);
      
      setProgress(20);
      setProgressMessage("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ AI –º–æ–¥–µ–ª—å...");
      
      const response1 = await callBothubAPI(
        [{ role: "user", content: step1Prompt }],
        { model: "gemini-2.5-pro", signal: controller.signal }
      );
      
      setProgress(30);
      setProgressMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ HTML –∫–æ–¥–∞...");
      
      // –ü–∞—Ä—Å–∏–º HTML –∏–∑ –æ—Ç–≤–µ—Ç–∞
      let html = response1.trim();
      // –ï—Å–ª–∏ AI –æ–±–µ—Ä–Ω—É–ª –≤ –∫–æ–¥-–±–ª–æ–∫–∏, –∏–∑–≤–ª–µ–∫–∞–µ–º
      const htmlMatch = html.match(/```\s*html[\r\n]+([\s\S]*?)```/i);
      if (htmlMatch) {
        html = htmlMatch[1].trim();
      }
      
      updateState({ html });
      setProgress(33);
      addLog("–®–∞–≥ 1 –∑–∞–≤–µ—Ä—à–µ–Ω: HTML –æ–±—Ä–∞–±–æ—Ç–∞–Ω");

      // ============================================================
      // –®–ê–ì 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–õ–ò –í–ê–õ–ò–î–ê–¶–ò–Ø JSON (–≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)
      // ============================================================
      setCurrentStep(2);
      setProgress(40);
      setProgressMessage("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON...");
      addLog(`–®–∞–≥ 2/3: ${stepNames.step2}`);
      
      setProgress(50);
      setProgressMessage("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ AI –º–æ–¥–µ–ª—å...");
      
      const response2 = await callBothubAPI(
        [{ role: "user", content: step2Prompt }],
        { model: "gemini-2.5-pro", signal: controller.signal }
      );
      
      setProgress(60);
      setProgressMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ JSON –∫–æ–¥–∞...");
      
      // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      let json = response2.trim();
      // –ï—Å–ª–∏ AI –æ–±–µ—Ä–Ω—É–ª –≤ –∫–æ–¥-–±–ª–æ–∫–∏, –∏–∑–≤–ª–µ–∫–∞–µ–º
      const jsonMatch = json.match(/```\s*json[\r\n]+([\s\S]*?)```/i);
      if (jsonMatch) {
        json = jsonMatch[1].trim();
      }
      
      updateState({ json });
      setProgress(66);
      addLog("–®–∞–≥ 2 –∑–∞–≤–µ—Ä—à–µ–Ω: JSON –æ–±—Ä–∞–±–æ—Ç–∞–Ω");

      // ============================================================
      // –®–ê–ì 3: –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø (–≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)
      // ============================================================
      setCurrentStep(3);
      setProgress(75);
      setProgressMessage("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");
      addLog(`–®–∞–≥ 3/3: ${stepNames.step3}`);
      
      setProgress(85);
      setProgressMessage("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");
      
      const response3 = await callBothubAPI(
        [{ role: "user", content: step3Prompt }],
        { model: "gemini-2.5-pro", signal: controller.signal }
      );
      
      setProgress(95);
      setProgressMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...");
      
      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Step 3
      let fixedHtml = '';
      let fixedJson = '';
      let reportMarkdown = '';
      
      if (state.quickFix) {
        // –í —Ä–µ–∂–∏–º–µ quickFix –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: HTML ---JSON--- JSON
        const parts = response3.split('---JSON---');
        if (parts.length === 2) {
          fixedHtml = parts[0].trim();
          fixedJson = parts[1].trim();
          
          // –£–±–∏—Ä–∞–µ–º –∫–æ–¥-–±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
          const htmlMatch = fixedHtml.match(/```\s*html[\r\n]+([\s\S]*?)```/i);
          if (htmlMatch) fixedHtml = htmlMatch[1].trim();
          
          const jsonMatch = fixedJson.match(/```\s*json[\r\n]+([\s\S]*?)```/i);
          if (jsonMatch) fixedJson = jsonMatch[1].trim();
          
          reportMarkdown = '‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
        }
      } else {
        // –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º: –∏–∑–≤–ª–µ–∫–∞–µ–º HTML, JSON –∏ –æ—Ç—á–µ—Ç
        const htmlMatch = response3.match(/```\s*html[\r\n]+([\s\S]*?)```/i);
        const jsonMatch = response3.match(/```\s*json[\r\n]+([\s\S]*?)```/i);
        
        fixedHtml = htmlMatch ? htmlMatch[1].trim() : html;
        fixedJson = jsonMatch ? jsonMatch[1].trim() : json;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç—á–µ—Ç (–≤—Å—ë –ø–æ—Å–ª–µ JSON –±–ª–æ–∫–∞ –∏–ª–∏ —Å –º–∞—Ä–∫–µ—Ä–æ–º –æ—Ç—á–µ—Ç–∞)
        const reportMatch = response3.match(/```\s*json[\r\n]+[\s\S]*?```[\r\n]+([\s\S]*)/i);
        reportMarkdown = reportMatch ? reportMatch[1].trim() : '‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
      }

      updateState({
        fixedHtml,
        fixedJson,
        reportMarkdown
      });

      setProgress(100);
      setProgressMessage("‚úÖ –í—Å–µ 3 —à–∞–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
      addLog("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: –≤—Å–µ 3 —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      saveToHistory("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", {
        goal: state.goal,
        originalHtml: state.originalHtml,
        originalJson: state.originalJson,
        html,
        json,
        fixedHtml,
        fixedJson,
        reportMarkdown
      });

      toast.success("–í—Å–µ 3 —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
      
      setTimeout(() => {
        setActiveTab('fixed');
      }, 500);
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–∞
      if (error instanceof Error && (error.name === 'AbortError' || error.message === 'Request cancelled')) {
        addLog("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω");
        return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast.error –¥–ª—è –æ—Ç–º–µ–Ω—ã
      }
      
      logger.error('Analysis error', 'CreateTab', { error: error instanceof Error ? error.message : error, currentStep });
      addLog(`–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${currentStep}: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
      toast.error(`–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${currentStep}`);
    } finally {
      setIsProcessing(false);
      setProgress(0);
      setCurrentStep(0);
      setProgressMessage("");
      setAbortController(null);
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="space-y-6">
        {isApplyingSettings && (
          <Alert>
            <AlertDescription>
              –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∫–æ–¥—É...
            </AlertDescription>
          </Alert>
        )}
        
        <Card className="p-6">
          <h2 className="text-lg font-bold mb-4">–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã</h2>
          
          <div className="space-y-4">
            <ZipUpload onZipParsed={handleZipParsed} isLoading={isProcessing} />
            
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-card px-2 text-muted-foreground">–∏–ª–∏</span>
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="goal">–¶–µ–ª—å/–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞</Label>
                {isGoalChanged && (
                  <span className="text-xs text-muted-foreground">
                    –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                  </span>
                )}
              </div>
              <Textarea
                id="goal"
                value={goalInput}
                onChange={(e) => setGoalInput(e.target.value)}
                placeholder="–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –±–ª–æ–∫ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å..."
                className="min-h-[120px]"
              />
              <Button
                variant={isGoalChanged ? "default" : "outline"}
                size="sm"
                onClick={applyGoal}
                disabled={!isGoalChanged}
                className="w-full"
              >
                <Check className="mr-2 h-3.5 w-3.5" />
                –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –∫ –ø—Ä–æ–º–ø—Ç—É
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={generateGoalFromSettings}
                className="w-full"
              >
                <Wand2 className="mr-2 h-3.5 w-3.5" />
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={onImproveGoalClick}
                disabled={!goalInput.trim()}
                className="w-full"
              >
                <Sparkles className="mr-2 h-3.5 w-3.5" />
                –£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —Ü–µ–ª–∏
              </Button>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="fastMode"
                checked={state.fastMode || false}
                onCheckedChange={(checked) => 
                  updateState({ fastMode: checked as boolean })
                }
              />
              <Label htmlFor="fastMode" className="text-sm font-normal cursor-pointer">
                –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (1 –∑–∞–ø—Ä–æ—Å, ~5-10 —Å–µ–∫)
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="quickFix"
                checked={state.quickFix}
                onCheckedChange={(checked) => 
                  updateState({ quickFix: checked as boolean })
                }
                disabled={state.fastMode}
              />
              <Label 
                htmlFor="quickFix" 
                className={`text-sm font-normal ${state.fastMode ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
              >
                –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞, —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
              </Label>
            </div>

            <div className="border-t pt-4 mt-4">
              <h3 className="font-semibold mb-3 text-sm">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
              
              <div className="flex items-center space-x-2 mb-3">
                <Checkbox
                  id="isDynamicGrid"
                  checked={state.isDynamicGrid}
                  onCheckedChange={(checked) => 
                    updateState({ isDynamicGrid: checked as boolean })
                  }
                />
                <Label htmlFor="isDynamicGrid" className="text-sm font-normal cursor-pointer">
                  –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
                </Label>
              </div>

              {state.isDynamicGrid && (
                <Alert className="mb-3">
                  <AlertDescription className="text-xs">
                    –í–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ—Ç–∫–µ
                  </AlertDescription>
                </Alert>
              )}

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="isEditable"
                  checked={state.isEditable}
                  onCheckedChange={(checked) => 
                    updateState({ isEditable: checked as boolean })
                  }
                />
                <Label htmlFor="isEditable" className="text-sm font-normal cursor-pointer">
                  –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –±–ª–æ–∫
                </Label>
              </div>
            </div>
          </div>
        </Card>

        <ComponentSettings
          html={state.originalHtml}
          json={state.originalJson}
          selectedSettings={selectedSettings}
          onSettingChange={handleSettingChange}
        />

        <Card className="p-6">
          <CodeEditor
            value={state.originalHtml}
            onChange={updateHtml}
            label="HTML –∫–æ–¥"
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HTML –∫–æ–¥ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."
            language="html"
          />
        </Card>

        <Card className="p-6">
          <CodeEditor
            value={state.originalJson}
            onChange={updateJson}
            label="JSON –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ JSON –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."
            language="json"
          />
        </Card>
      </div>

      <div className="space-y-6">
        <Card className="p-6">
          <h3 className="font-semibold mb-2">–û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤</h3>
          <p className="text-sm text-muted-foreground">
            –ü—Ä–∏–º–µ—Ä–Ω–æ {tokenEstimate.toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤
          </p>
        </Card>

        {outputPrompt && (
          <Card className="p-6">
            <CodeEditor
              value={outputPrompt}
              onChange={() => {}} // Read-only, –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
              label="–ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è)"
              placeholder=""
              showCopy={true}
              className="min-h-[200px]"
            />
          </Card>
        )}

        <Button
          onClick={handleAnalyze}
          disabled={isProcessing || isApplyingSettings}
          className="w-full h-12 text-base font-semibold bg-primary hover:bg-primary-hover"
        >
          {isProcessing ? (
            <>
              <Loader2 className="mr-2 h-5 w-5 animate-spin" />
              –û–±—Ä–∞–±–æ—Ç–∫–∞...
            </>
          ) : (
            <>
              <Sparkles className="mr-2 h-5 w-5" />
              –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            </>
          )}
        </Button>

        {isProcessing && abortController && (
          <Button
            onClick={handleCancelRequest}
            variant="destructive"
            className="w-full h-12 text-base font-semibold"
          >
            –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
          </Button>
        )}

        {isProcessing && progress > 0 && (
          <ProgressIndicator
            steps={[
              {
                name: stepNames.step1 || "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML",
                status: currentStep > 1 ? "completed" : currentStep === 1 ? "processing" : "pending"
              },
              {
                name: stepNames.step2 || "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON",
                status: currentStep > 2 ? "completed" : currentStep === 2 ? "processing" : "pending"
              },
              {
                name: stepNames.step3 || "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                status: currentStep > 3 ? "completed" : currentStep === 3 ? "processing" : "pending"
              }
            ]}
            currentProgress={progress}
            message={progressMessage || pipelineDescription}
          />
        )}

        <DiagnosticLog 
          logs={state.log}
          onClear={() => updateState({ log: [] })}
        />

        <Card className="p-6">
          <h3 className="font-semibold mb-3">–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</h3>
          <div className="text-sm space-y-3 text-muted-foreground">
            <div className="border-b pb-2">
              <strong className="text-foreground">–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (1 –∑–∞–ø—Ä–æ—Å)</strong>
              <ul className="mt-1 ml-4 space-y-1 list-disc">
                <li>–í—Ä–µ–º—è: ~5-10 —Å–µ–∫—É–Ω–¥</li>
                <li>–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π Knowledge Base –∑–∞ —Ä–∞–∑</li>
                <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –±–ª–æ–∫–æ–≤</li>
                <li>–ë—ã—Å—Ç—Ä–µ–µ, –Ω–æ –º–µ–Ω—å—à–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏</li>
              </ul>
            </div>
            
            <div>
              <strong className="text-foreground">–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (3 –∑–∞–ø—Ä–æ—Å–∞)</strong>
              <ul className="mt-1 ml-4 space-y-1 list-disc">
                <li>–í—Ä–µ–º—è: ~20-30 —Å–µ–∫—É–Ω–¥</li>
                <li><strong>–®–∞–≥ 1</strong>: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è/–≤–∞–ª–∏–¥–∞—Ü–∏—è HTML</li>
                <li><strong>–®–∞–≥ 2</strong>: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è/–≤–∞–ª–∏–¥–∞—Ü–∏—è JSON</li>
                <li><strong>–®–∞–≥ 3</strong>: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</li>
                <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π</li>
              </ul>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
}
